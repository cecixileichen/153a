{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar AddTodo = function AddTodo() {\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    modalVisible = _useState2[0],\n    setModalVisible = _useState2[1];\n  return _jsxs(View, {\n    style: styles.centeredView,\n    children: [_jsx(Modal, {\n      animationType: \"slide\",\n      transparent: true,\n      visible: modalVisible,\n      onRequestClose: function onRequestClose() {\n        Alert.alert('Modal has been closed.');\n        setModalVisible(!modalVisible);\n      },\n      children: _jsx(View, {\n        children: _jsx(View, {\n          style: styles.modalView,\n          children: _jsx(Pressable, {\n            onPress: function onPress() {\n              return setModalVisible(!modalVisible);\n            },\n            children: _jsx(Text, {\n              style: styles.textStyle,\n              children: \"Add\"\n            })\n          })\n        })\n      })\n    }), _jsx(Pressable, {\n      onPress: function onPress() {\n        return setModalVisible(true);\n      },\n      children: _jsx(Text, {\n        style: styles.textStyle,\n        children: \"\\u270C\\uFE0E\\uFE0E\\u2022 \\u25E1\\u2022\\uD835\\uDD6A\\uD835\\uDD56\\uD835\\uDD56\\uD835\\uDD56     Add Todo\"\n      })\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  centeredView: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: 22\n  },\n  modalView: {\n    margin: 20,\n    backgroundColor: 'white',\n    borderRadius: 20,\n    padding: 35,\n    alignItems: 'center',\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 4,\n    elevation: 5\n  },\n  button: {\n    borderRadius: 20,\n    padding: 10,\n    elevation: 2\n  },\n  buttonOpen: {\n    backgroundColor: '#F194FF'\n  },\n  buttonClose: {\n    backgroundColor: '#2196F3'\n  },\n  textStyle: {\n    fontSize: 14\n  },\n  modalText: {\n    marginBottom: 15,\n    textAlign: 'center'\n  }\n});\nexport default AddTodo;","map":{"version":3,"names":["React","useState","Alert","Modal","StyleSheet","Text","Pressable","View","Button","TextInput","jsx","_jsx","jsxs","_jsxs","AddTodo","_useState","_useState2","_slicedToArray","modalVisible","setModalVisible","style","styles","centeredView","children","animationType","transparent","visible","onRequestClose","alert","modalView","onPress","textStyle","create","flex","justifyContent","alignItems","marginTop","margin","backgroundColor","borderRadius","padding","shadowColor","shadowOffset","width","height","shadowOpacity","shadowRadius","elevation","button","buttonOpen","buttonClose","fontSize","modalText","marginBottom","textAlign"],"sources":["/Users/iamcccc/Desktop/153a/AwesomeProject/components/AddToDo.js"],"sourcesContent":["import React, {useState} from 'react';\nimport {Alert, Modal, StyleSheet, Text, Pressable, View} from 'react-native';\nimport { Button, TextInput } from 'react-native-web';\n\nconst AddTodo = () => {\n  const [modalVisible, setModalVisible] = useState(false);\n\n  return (\n    <View style={styles.centeredView}>\n      <Modal\n        animationType=\"slide\"\n        transparent={true}\n        visible={modalVisible}\n        onRequestClose={() => {\n          Alert.alert('Modal has been closed.');\n          setModalVisible(!modalVisible);\n        }}>\n        <View>\n          <View style={styles.modalView}>\n            {/* <TextInput\n\n            /> */}\n            <Pressable\n              onPress={() => setModalVisible(!modalVisible)}>\n              <Text style={styles.textStyle}>Add</Text>\n            </Pressable>\n          </View>\n        </View>\n      </Modal>\n      <Pressable\n        onPress={() => setModalVisible(true)}>\n        <Text style={styles.textStyle}>‚úåÔ∏éÔ∏é‚Ä¢ ‚ó°‚Ä¢ùï™ùïñùïñùïñ     Add Todo</Text>\n      </Pressable>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  centeredView: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: 22,\n  },\n  modalView: {\n    margin: 20,\n    backgroundColor: 'white',\n    borderRadius: 20,\n    padding: 35,\n    alignItems: 'center',\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 4,\n    elevation: 5,\n  },\n  button: {\n    borderRadius: 20,\n    padding: 10,\n    elevation: 2,\n  },\n  buttonOpen: {\n    backgroundColor: '#F194FF',\n  },\n  buttonClose: {\n    backgroundColor: '#2196F3',\n  },\n  textStyle: {\n    fontSize: 14\n  },\n  modalText: {\n    marginBottom: 15,\n    textAlign: 'center',\n  },\n});\n\nexport default AddTodo;"],"mappings":";AAAA,OAAOA,KAAK,IAAGC,QAAQ,QAAO,OAAO;AAAC,OAAAC,KAAA;AAAA,OAAAC,KAAA;AAAA,OAAAC,UAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,SAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,MAAA;AAAA,OAAAC,SAAA;AAAA,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAItC,IAAMC,OAAO,GAAG,SAAVA,OAAOA,CAAA,EAAS;EACpB,IAAAC,SAAA,GAAwCd,QAAQ,CAAC,KAAK,CAAC;IAAAe,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAAhDG,YAAY,GAAAF,UAAA;IAAEG,eAAe,GAAAH,UAAA;EAEpC,OACEH,KAAA,CAACN,IAAI;IAACa,KAAK,EAAEC,MAAM,CAACC,YAAa;IAAAC,QAAA,GAC/BZ,IAAA,CAACR,KAAK;MACJqB,aAAa,EAAC,OAAO;MACrBC,WAAW,EAAE,IAAK;MAClBC,OAAO,EAAER,YAAa;MACtBS,cAAc,EAAE,SAAAA,eAAA,EAAM;QACpBzB,KAAK,CAAC0B,KAAK,CAAC,wBAAwB,CAAC;QACrCT,eAAe,CAAC,CAACD,YAAY,CAAC;MAChC,CAAE;MAAAK,QAAA,EACFZ,IAAA,CAACJ,IAAI;QAAAgB,QAAA,EACHZ,IAAA,CAACJ,IAAI;UAACa,KAAK,EAAEC,MAAM,CAACQ,SAAU;UAAAN,QAAA,EAI5BZ,IAAA,CAACL,SAAS;YACRwB,OAAO,EAAE,SAAAA,QAAA;cAAA,OAAMX,eAAe,CAAC,CAACD,YAAY,CAAC;YAAA,CAAC;YAAAK,QAAA,EAC9CZ,IAAA,CAACN,IAAI;cAACe,KAAK,EAAEC,MAAM,CAACU,SAAU;cAAAR,QAAA,EAAC;YAAG,CAAM;UAAC,CAChC;QAAC,CACR;MAAC,CACH;IAAC,CACF,CAAC,EACRZ,IAAA,CAACL,SAAS;MACRwB,OAAO,EAAE,SAAAA,QAAA;QAAA,OAAMX,eAAe,CAAC,IAAI,CAAC;MAAA,CAAC;MAAAI,QAAA,EACrCZ,IAAA,CAACN,IAAI;QAACe,KAAK,EAAEC,MAAM,CAACU,SAAU;QAAAR,QAAA,EAAC;MAA4B,CAAM;IAAC,CACzD,CAAC;EAAA,CACR,CAAC;AAEX,CAAC;AAED,IAAMF,MAAM,GAAGjB,UAAU,CAAC4B,MAAM,CAAC;EAC/BV,YAAY,EAAE;IACZW,IAAI,EAAE,CAAC;IACPC,cAAc,EAAE,QAAQ;IACxBC,UAAU,EAAE,QAAQ;IACpBC,SAAS,EAAE;EACb,CAAC;EACDP,SAAS,EAAE;IACTQ,MAAM,EAAE,EAAE;IACVC,eAAe,EAAE,OAAO;IACxBC,YAAY,EAAE,EAAE;IAChBC,OAAO,EAAE,EAAE;IACXL,UAAU,EAAE,QAAQ;IACpBM,WAAW,EAAE,MAAM;IACnBC,YAAY,EAAE;MACZC,KAAK,EAAE,CAAC;MACRC,MAAM,EAAE;IACV,CAAC;IACDC,aAAa,EAAE,IAAI;IACnBC,YAAY,EAAE,CAAC;IACfC,SAAS,EAAE;EACb,CAAC;EACDC,MAAM,EAAE;IACNT,YAAY,EAAE,EAAE;IAChBC,OAAO,EAAE,EAAE;IACXO,SAAS,EAAE;EACb,CAAC;EACDE,UAAU,EAAE;IACVX,eAAe,EAAE;EACnB,CAAC;EACDY,WAAW,EAAE;IACXZ,eAAe,EAAE;EACnB,CAAC;EACDP,SAAS,EAAE;IACToB,QAAQ,EAAE;EACZ,CAAC;EACDC,SAAS,EAAE;IACTC,YAAY,EAAE,EAAE;IAChBC,SAAS,EAAE;EACb;AACF,CAAC,CAAC;AAEF,eAAexC,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}