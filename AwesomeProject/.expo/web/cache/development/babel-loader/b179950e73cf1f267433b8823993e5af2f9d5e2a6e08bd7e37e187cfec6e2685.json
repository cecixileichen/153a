{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { useEffect, useState, useRef } from \"react\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar Countdown = function Countdown() {\n  var _useState = useState(13),\n    _useState2 = _slicedToArray(_useState, 2),\n    countdown = _useState2[0],\n    setCountdown = _useState2[1];\n  var timerId = useRef();\n  var formalTime = function formalTime(time) {\n    var minutes = Math.floor(time / 60);\n    var seconds = Math.floor(time - minutes * 60);\n    if (seconds <= 9) seconds = '0' + seconds;\n    return minutes + ':' + seconds;\n  };\n  useEffect(function () {\n    timerId.current = setInterval(function () {\n      setCountdown(function (prev) {\n        return prev - 1;\n      });\n    }, 1000);\n    return function () {\n      return clearInterval(timerId.current);\n    };\n  }, []);\n  useEffect(function () {\n    if (countdown <= 0) {\n      clearInterval(timerId.current);\n      alert('end');\n    }\n  }, [countdown]);\n  return _jsx(Text, {\n    children: formalTime(countdown)\n  });\n};\nexport default Countdown;","map":{"version":3,"names":["useEffect","useState","useRef","jsx","_jsx","Countdown","_useState","_useState2","_slicedToArray","countdown","setCountdown","timerId","formalTime","time","minutes","Math","floor","seconds","current","setInterval","prev","clearInterval","alert","Text","children"],"sources":["/Users/iamcccc/Desktop/153a/AwesomeProject/components/Countdown.js"],"sourcesContent":["import { Text, View } from \"react-native\";\nimport { useEffect, useState, useRef } from \"react\";\n\nconst Countdown = () => {\n    const [countdown, setCountdown] = useState(13);\n    const timerId = useRef()\n\n    const formalTime = (time) => {\n        let minutes = Math.floor(time / 60)\n        let seconds = Math.floor(time - minutes * 60)\n\n        if(seconds <= 9) seconds = '0' + seconds;\n        return minutes + ':' + seconds\n    }\n\n    useEffect(() => {\n        timerId.current = setInterval(() => {\n            setCountdown(prev => prev - 1)\n        }, 1000)\n        return () => clearInterval(timerId.current)\n    }, [])\n\n    useEffect(() => {\n        if(countdown <= 0) {\n            clearInterval(timerId.current)\n            alert('end')\n        }\n    }, [countdown])\n\n    return(\n        <Text>{formalTime(countdown)}</Text>\n    )\n\n\n}\n\nexport default Countdown;"],"mappings":";;;AACA,SAASA,SAAS,EAAEC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAAC,SAAAC,GAAA,IAAAC,IAAA;AAEpD,IAAMC,SAAS,GAAG,SAAZA,SAASA,CAAA,EAAS;EACpB,IAAAC,SAAA,GAAkCL,QAAQ,CAAC,EAAE,CAAC;IAAAM,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAAvCG,SAAS,GAAAF,UAAA;IAAEG,YAAY,GAAAH,UAAA;EAC9B,IAAMI,OAAO,GAAGT,MAAM,CAAC,CAAC;EAExB,IAAMU,UAAU,GAAG,SAAbA,UAAUA,CAAIC,IAAI,EAAK;IACzB,IAAIC,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACH,IAAI,GAAG,EAAE,CAAC;IACnC,IAAII,OAAO,GAAGF,IAAI,CAACC,KAAK,CAACH,IAAI,GAAGC,OAAO,GAAG,EAAE,CAAC;IAE7C,IAAGG,OAAO,IAAI,CAAC,EAAEA,OAAO,GAAG,GAAG,GAAGA,OAAO;IACxC,OAAOH,OAAO,GAAG,GAAG,GAAGG,OAAO;EAClC,CAAC;EAEDjB,SAAS,CAAC,YAAM;IACZW,OAAO,CAACO,OAAO,GAAGC,WAAW,CAAC,YAAM;MAChCT,YAAY,CAAC,UAAAU,IAAI;QAAA,OAAIA,IAAI,GAAG,CAAC;MAAA,EAAC;IAClC,CAAC,EAAE,IAAI,CAAC;IACR,OAAO;MAAA,OAAMC,aAAa,CAACV,OAAO,CAACO,OAAO,CAAC;IAAA;EAC/C,CAAC,EAAE,EAAE,CAAC;EAENlB,SAAS,CAAC,YAAM;IACZ,IAAGS,SAAS,IAAI,CAAC,EAAE;MACfY,aAAa,CAACV,OAAO,CAACO,OAAO,CAAC;MAC9BI,KAAK,CAAC,KAAK,CAAC;IAChB;EACJ,CAAC,EAAE,CAACb,SAAS,CAAC,CAAC;EAEf,OACIL,IAAA,CAACmB,IAAI;IAAAC,QAAA,EAAEZ,UAAU,CAACH,SAAS;EAAC,CAAO,CAAC;AAI5C,CAAC;AAED,eAAeJ,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}