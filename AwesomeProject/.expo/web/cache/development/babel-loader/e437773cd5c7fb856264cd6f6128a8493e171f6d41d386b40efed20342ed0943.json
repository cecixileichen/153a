{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar AddTodo = function AddTodo(_ref) {\n  var setTodo = _ref.setTodo,\n    handleAddTodo = _ref.handleAddTodo;\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    modalVisible = _useState2[0],\n    setModalVisible = _useState2[1];\n  return _jsxs(View, {\n    children: [_jsx(Modal, {\n      animationType: \"slide\",\n      transparent: true,\n      visible: modalVisible,\n      onRequestClose: function onRequestClose() {\n        Alert.alert('Modal has been closed.');\n        setModalVisible(!modalVisible);\n      },\n      children: _jsx(View, {\n        style: styles.centeredView,\n        children: _jsxs(View, {\n          style: styles.modalView,\n          children: [_jsx(TextInput, {\n            style: styles.input,\n            placeholder: \"Type new task~\",\n            onChangeText: function onChangeText(text) {\n              return setTodo(text);\n            }\n          }), _jsx(Text, {\n            children: \"     \"\n          }), _jsx(Pressable, {\n            style: styles.buttonClose,\n            onPress: function onPress() {\n              handleAddTodo(), setModalVisible(!modalVisible);\n            },\n            children: _jsx(Text, {\n              style: styles.textStyle,\n              children: \"Add\"\n            })\n          })]\n        })\n      })\n    }), _jsx(Pressable, {\n      style: styles.buttonOpen,\n      onPress: function onPress() {\n        return setModalVisible(true);\n      },\n      children: _jsx(Text, {\n        style: styles.textStyle,\n        children: \"\\u270C\\uFE0E\\uFE0E\\u2022 \\u25E1\\u2022\\uD835\\uDD6A\\uD835\\uDD56\\uD835\\uDD56\\uD835\\uDD56     Add Todo\"\n      })\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  centeredView: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: 22\n  },\n  modalView: {\n    margin: 20,\n    backgroundColor: 'white',\n    borderRadius: 20,\n    padding: 35,\n    alignItems: 'center',\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 4,\n    elevation: 5\n  },\n  buttonOpen: {\n    height: 30,\n    width: 150\n  },\n  input: {\n    height: 30\n  },\n  buttonClose: {\n    alignItems: 'center'\n  },\n  textStyle: {\n    fontSize: 14\n  }\n});\nexport default AddTodo;","map":{"version":3,"names":["React","useState","Alert","Modal","StyleSheet","Text","TextInput","Pressable","View","jsx","_jsx","jsxs","_jsxs","AddTodo","_ref","setTodo","handleAddTodo","_useState","_useState2","_slicedToArray","modalVisible","setModalVisible","children","animationType","transparent","visible","onRequestClose","alert","style","styles","centeredView","modalView","input","placeholder","onChangeText","text","buttonClose","onPress","textStyle","buttonOpen","create","flex","justifyContent","alignItems","marginTop","margin","backgroundColor","borderRadius","padding","shadowColor","shadowOffset","width","height","shadowOpacity","shadowRadius","elevation","fontSize"],"sources":["/Users/iamcccc/Desktop/153a/AwesomeProject/components/AddToDo.js"],"sourcesContent":["import React, {useState} from 'react';\nimport {Alert, Modal, StyleSheet, Text, TextInput, Pressable, View} from 'react-native';\n\nconst AddTodo = ({setTodo, handleAddTodo}) => {\n  const [modalVisible, setModalVisible] = useState(false);\n  return (\n    <View>\n      <Modal\n        animationType=\"slide\"\n        transparent={true}\n        visible={modalVisible}\n        onRequestClose={() => {\n          Alert.alert('Modal has been closed.');\n          setModalVisible(!modalVisible);\n        }}>\n        <View style={styles.centeredView}>\n          <View style={styles.modalView}>\n            <TextInput\n                style={styles.input}\n                placeholder=\"Type new task~\"\n                onChangeText={text => setTodo(text)}\n            />\n            <Text>     </Text>\n            <Pressable\n              style={styles.buttonClose}\n              onPress={() => {handleAddTodo(),\n                              setModalVisible(!modalVisible)\n              }}>\n              <Text style={styles.textStyle}>Add</Text>\n            </Pressable>\n          </View>\n        </View>\n      </Modal>\n      <Pressable\n        style={styles.buttonOpen}\n        onPress={() => setModalVisible(true)}>\n        <Text style={styles.textStyle}>‚úåÔ∏éÔ∏é‚Ä¢ ‚ó°‚Ä¢ùï™ùïñùïñùïñ     Add Todo</Text>\n      </Pressable>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  centeredView: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: 22,\n  },\n  modalView: {\n    margin: 20,\n    backgroundColor: 'white',\n    borderRadius: 20,\n    padding: 35,\n    alignItems: 'center',\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 4,\n    elevation: 5,\n  },\n  buttonOpen: {\n    height: 30,\n    width: 150,\n  },\n  input: {\n    height: 30,\n  },\n  buttonClose: {\n    alignItems: 'center',\n  },\n  textStyle: {\n    fontSize: 14\n  },\n});\n\nexport default AddTodo;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}